# ðŸŒŸ Exercise 1: Import
from faker import Faker
from func import add_two_numbers
import random, string
from datetime import date, datetime

add_two_numbers(3, 4)


# ðŸŒŸ Exercise 2: Random Module
# Create a function that accepts a number between 1 and 100, then rolls a random number between 1 and 100,
def check_luck(guess: int):
    random_num = random.randint(1, 100)
    # if itâ€™s the same number, display a success message to the user, else donâ€™t.
    if guess == random_num: print("Congrats!")


check_luck(2)


# ðŸŒŸ Exercise 3: String module
# Generate random String of length 5
def random_string_generator(length: int = 5):
    # String must be the combination of the UPPER case and lower case letters only. No numbers and a special symbol.
    letters = string.ascii_letters
    return "".join(random.choice(letters) for i in range(length))


print(random_string_generator())


# ðŸŒŸ Exercise 4 : Current Date
# Create a function that displays the current date
def current_day():
    current_date = date.today()
    print("Current Date is:", current_date.strftime("%Y-%m-%d"))


current_day()


# Exercise 5 : Amount of time left until January 1st
# Create a function that displays the amount of time left from now until January 1st.
def time_left_until_jan1st():
    current_time = datetime.now()
    jan_1st = datetime(current_time.year + 1, 1, 1)
    # time_left belongs to object timedelta
    time_left = jan_1st - current_time
    days = time_left.days
    seconds = time_left.seconds
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    seconds = seconds % 60
    print(f"The 1st of January is in {days} days and {hours:02d}:{minutes:02d}:{seconds:02d} hours.")


time_left_until_jan1st()


# Exercise 6 : Birthday and minutes
def display_mins_lived(birthdate):
    birth_datetime = datetime.strptime(birthdate, "%Y.%m.%d")
    current_datetime = datetime.now()
    mins_lived = (current_datetime - birth_datetime).total_seconds() / 60
    print(f"You have lived approximately {mins_lived:.2f} minutes.")


display_mins_lived("1997.5.1")
print("\n")


# Exercise 7 : Upcoming Holiday

# Write a function that displays todayâ€™s date.
def display_upcoming_holiday():
    current_date = datetime.now()
    current_year = current_date.year
    # holiday list generated by chatgpt
    il_holiday_dict = {
        current_date.replace(month=1, day=1): "New Year's Day",
        current_date.replace(month=4, day=14): "Passover",
        current_date.replace(month=4, day=15): "Passover",
        current_date.replace(month=4, day=16): "Passover",
        current_date.replace(month=4, day=27): "Yom HaShoah",
        current_date.replace(month=5, day=9): "Victory Day",
        current_date.replace(month=5, day=12): "Lag BaOmer",
        current_date.replace(month=5, day=18): "Eve of Shavuot",
        current_date.replace(month=5, day=19): "Shavuot",
        current_date.replace(month=5, day=24): "Jerusalem Day",
        current_date.replace(month=7, day=18): "Tisha B'Av",
        current_date.replace(month=9, day=7): "Rosh Hashanah",
        current_date.replace(month=9, day=8): "Rosh Hashanah",
        current_date.replace(month=9, day=16): "Yom Kippur",
        current_date.replace(month=9, day=21): "Sukkot",
        current_date.replace(month=9, day=22): "Sukkot",
        current_date.replace(month=9, day=28): "Simchat Torah",
        current_date.replace(month=10, day=5): "Eve of Hanukkah",
        current_date.replace(month=10, day=6): "Hanukkah",
        current_date.replace(month=10, day=7): "Hanukkah",
        current_date.replace(month=10, day=8): "Hanukkah",
        current_date.replace(month=12, day=25): "Christmas"
    }

    upcoming_holidays = [holiday for holiday in il_holiday_dict.keys() if holiday >= current_date]
    if not upcoming_holidays:
        current_year += 1
        upcoming_holidays = [holiday.replace(year=current_year) for holiday in il_holiday_dict.keys()]

    next_holiday = min(upcoming_holidays)
    # we add hour-min-second to next_holiday as well to make sure the calculation is accurate
    time_left = next_holiday.replace(hour=0, minute=0, second=0) - current_date
    days = time_left.days
    hours = time_left.seconds // 3600
    minutes = (time_left.seconds % 3600) // 60
    seconds = time_left.seconds % 60

    print("Today's date:", current_date.strftime("%Y-%m-%d"))
    print("The next holiday is in {} days and {:02d}:{:02d}:{:02d} hours.".format(days, hours, minutes, seconds))
    print("The upcoming holiday is:", next_holiday.strftime("%Y-%m-%d"))
    print("Holiday name:", il_holiday_dict[next_holiday])


display_upcoming_holiday()
print("\n")


# ---------------------------------------------------------------------------------------------
# Exercise 8 : How Old Are You On Jupiter?
# Given an age in seconds, calculate how old someone would be on different planets:
def calculate_age_on_planet(age_in_seconds):
    earth_year_seconds = 31557600
    orbital_periods = {
        'Earth': 1,
        'Mercury': 0.2408467,
        'Venus': 0.61519726,
        'Mars': 1.8808158,
        'Jupiter': 11.862615,
        'Saturn': 29.447498,
        'Uranus': 84.016846,
        'Neptune': 164.79132
    }

    age_on_planets = {}
    for planet, orbital_period in orbital_periods.items():
        age_on_planet = age_in_seconds / (earth_year_seconds * orbital_period)
        age_on_planets[planet] = age_on_planet

    return age_on_planets


age_in_seconds = 1000000000
age_on_planets = calculate_age_on_planet(age_in_seconds)

for planet, age in age_on_planets.items():
    print(f"Age on {planet}: {age:.2f} Earth-years")

# ---------------------------------------------------------------------------------------------
# Exercise 9 : Faker Module
# Create an empty list called users. Tip: It should be a list of dictionaries.
# Create a function that adds new dictionaries to the users list. Each user has the following keys: name, adress,
# langage_code. Use faker to populate them with fake data.


users = []
fake = Faker()


def fill_the_dict():
    user_dict = {'name': fake.name(), 'address': fake.address(), 'langage_code': fake.language_code()}
    users.append(user_dict)


for i in range(10):
    fill_the_dict()

print(users)
